# MIMO_real.sim
# Basic mmWave MIMO model
# Author: Wuqiong Zhao
# Date: 2023-05-05

version: 0.2.1 # the targeted mmCEsim version
meta: # document meta data
  title: mmWave MIMO model
  description:
    Simple Functional Test with OMP
  author: Wuqiong Zhao
  email: contact@mmcesim.org
  website: https://mmcesim.org
  license: MIT
  date: "2023-05-05"
  comments: This is an uplink channel.
physics:
  frequency: narrow # assume narrow band
  off_grid: false # do not consider off-grid problem
nodes:
  - id: BS # this should be unique
    role: receiver
    num: 1 # this is the default value
    size: [16, 1] # UPA with size 8x4
    beam: [4, 1]
    grid: same # the same as physics size
    beamforming:
      variable: "W"
      scheme: random
  - id: UE # user
    role: transmitter
    num: 1 # a single-user model
    size: 8 # ULA with size 8
    beam: 2
    grid: 8
    beamforming:
      variable: "F"
      scheme: random
channels:
  - id: H
    from: UE
    to: BS # 'from -> to' specifies the channel direction
    sparsity: 4
    gains:
      mode: normal
      mean: 0
      variance: 1
sounding:
  variables:
    received: "y" # received signal vector
    noise: "noise" # received noise vector
    channel: "H_cascaded" # the cascaded channel (actually the same as 'H' for simple MIMO)
preamble: |
  COMMENT Here starts the preamble.
  COMMENT CHS.PATHS_NUM: `CHS.PATHS_NUM`
  COMMENT CHS.CHANNELS[0]: `CHS.CHANNELS[0]`
  COMMENT CHS.CHANNELS[1 - 1].ID: `CHS.CHANNELS[1 - 1].ID`
  LOG [INFO] A user-defined LOG message.
estimation: |
  VNt::m = NEW `DICTIONARY.T`
  VNr::m = NEW `DICTIONARY.R`
  lambda_hat = INIT `GRID.*`
  Q = INIT `MEASUREMENT` `GRID.*`
  i::u0 = LOOP 0 `PILOT`/`BEAM.T`
    F_t::m = NEW F_{:,:,i}
    W_t::m = NEW W_{:,:,i}
    Q_{i*`BEAM.*`:(i+1)*`BEAM.*`-1,:} = \kron(F_t^T, W_t^H) @ \kron(VNt^*, VNr) # the sensing matrix
  END
  BRANCH
  lambda_hat = ESTIMATE Q y
  RECOVER VNr @ \reshape(lambda_hat, `GRID.R`, `GRID.T`) @ VNt^H
  MERGE
conclusion: |
  i::u0 = LOOP 0 \length(`NMSE`)
    PRINT `NMSE`_{i} '\n'
  END
  PRINT '\n'
simulation:
  backend: cpp # cpp (default) | matlab | octave | py
  metric: [NMSE] # used for compare
  jobs:
    - name: NMSE v.s. SNR
      test_num: 20
      SNR: [-10:2:20]
      SNR_mode: dB # dB (default) | linear
      pilot: 32
      # pilot_mode: percent # num (default) | percent
      algorithms: # compare different languages
        - alg: OMP
          max_iter: 5
          label: OMP # used in report
          estimated_channel: H_hat_OMP # variable name for the estimated channel
    - name: NMSE v.s. pilot
      test_num: 20
      SNR: 0
      pilot: [16:8:64]
      algorithms: # compare different languages
        - alg: OMP
          max_iter: 5
          label: OMP # used in report
    - name: OMP NMSE v.s. Iter
      test_num: 20
      SNR: 0
      pilot: 32
      algorithms: # compare different languages
        - alg: OMP
          max_iter: 2
          label: OMP Iter 2
        - alg: OMP
          max_iter: 3
          label: OMP Iter 3
        - alg: OMP
          max_iter: 4
          label: OMP Iter 4
        - alg: OMP
          max_iter: 5
          label: OMP Iter 5
        - alg: OMP
          max_iter: 6
          label: OMP Iter 6
        - alg: OMP
          max_iter: 8
          label: OMP Iter 8
        - alg: OMP
          max_iter: 10
          label: OMP Iter 10 # used in report
  report:
    name: MIMO_OMP_Report
    format: [pdf, latex] # both compiled PDF and tex files
    plot: true # plot data
    table: false # do not print table
    latex:
      command: xelatex # command to compile the report
      UTF8: false # no need for UTF8 support with this setting
